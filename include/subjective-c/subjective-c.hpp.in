/// Copyright 2012-2015 Alexander Bohn <fish2000@gmail.com>
/// License: MIT (see COPYING.MIT file)

#ifndef SUBJECTIVE_C_CMAKE_HPP_IN_
#define SUBJECTIVE_C_CMAKE_HPP_IN_

#include <cstdint>
#include <vector>

#ifndef __has_feature                       /// Optional
#define __has_feature(x)                0   /// Compatibility with non-clang compilers
#endif

#define OBJC_VERSION_MAJOR                @libimread_VERSION_MAJOR@
#define OBJC_VERSION_MINOR                @libimread_VERSION_MINOR@
#define OBJC_VERSION_PATCH                @libimread_VERSION_PATCH@
#define OBJC_VERSION                      "@libimread_VERSION_MAJOR@.@libimread_VERSION_MINOR@.@libimread_VERSION_PATCH@"

#define OBJC_INSTALL_PREFIX               "@CMAKE_INSTALL_PREFIX@"
#define OBJC_COMPILE_OPTIONS              "@IM_COMPILE_OPTIONS@"
#define OBJC_INCLUDE_DIRECTORIES          "@IM_INCLUDE_DIRECTORIES@"
#define OBJC_LINK_LIBRARIES               "@IM_LINK_LIBRARIES@"
#define OBJC_LINK_FLAGS                   "@IM_LINK_FLAGS@"

#cmakedefine OBJC_COLOR_TRACE             1
#cmakedefine OBJC_VERBOSE                 1

namespace objc {
    
    /// `byte` is a way better token than `uint8_t` from, like,
    /// a human mnemonic perspective.
    
    using byte = uint8_t;
    
    /// string length at compile time -- http://stackoverflow.com/a/26082447/298171
    template <std::size_t N> inline
    constexpr std::size_t static_strlen(char const (&)[N]) { return N; }

#ifndef DECLARE_CONSTEXPR_CHAR
#define DECLARE_CONSTEXPR_CHAR(decl, token) constexpr char decl[objc::static_strlen(token)]
#endif

#ifndef ST
#define ST(s) "" #s 
#endif /// ST

/// `unpack` is a sleazy trick for -- YOU GUESSED IT -- 
/// expanding variadic template parameter packs. USAGE:
///
///     unpack {
///         (out += std::to_string(array[I]))...
///     };

#define unpack                     __attribute__((unused)) int unpacker[]

/// Use `warn_unused` like a trailing function-definition keyword:
///
///     void yodogg(std::string const& s) const warn_unused { â€¦ }

#define warn_unused                __attribute__((__warn_unused_result__))

} /* namespace objc */

#include "subjective-c/subjective-c.hh"

#endif /// SUBJECTIVE_C_CMAKE_HPP_IN_